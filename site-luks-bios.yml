---
- hosts: all
  remote_user: root

  vars:
    ansible_become_pass: rootpass
    pacstrap_extras:
      bios: 'gptfdisk syslinux'
      efi:  'efibootmgr'

  tasks:
    - name: Abort if the host is not booted from the Arch install media
      fail:
        msg: "This host is not booted from the Arch install media!"
      when: ansible_nodename != 'archiso'
      tags:
        - quick_exit
    - name: Synchronize clock via NTP
      command: timedatectl set-ntp true
      tags:
        - sync_clock
    - name: Initialize drive
      import_tasks: tasks/partition.yml
    - name: Setup LUKS encryption key
      block:
        - name: Copy keyfile
          copy:
            src: '{{ luks_keyfile }}'
            dest: /root/keyfile
      tags:
        - luks1
    - name: Setup LUKS encryption for root filesystem
      block:
        - name: Destroy existing LUKS volume
          luks_device:
            device: '{{ install_drive }}{{ root_partition_suffix }}'
            state: absent
        - name: Create and open LUKS volume
          luks_device:
            device: '{{ install_drive }}{{ root_partition_suffix }}'
            keyfile: /root/keyfile
            name: root
            state: opened
        - name: Get UUID for root LUKS volume
          command: blkid -s UUID -o value '{{ install_drive }}{{ root_partition_suffix }}'
          register: root_luks_uuid
          changed_when: false
        - name: Print return information from the previous task
          ansible.builtin.debug:
            var: root_luks_uuid
            verbosity: 2
      tags:
        - luks2
    - name: Create filesystems
      block:
        - name: Create FAT32 filesystem in boot partition
          filesystem:
            dev: '{{ install_drive }}{{ boot_partition_suffix }}'
            fstype: vfat
            opts: -F32
            force: yes
        - name: Create ext4 filesystem in root volume
          filesystem:
            dev: /dev/mapper/root
            fstype: ext4
            force: yes
        # - name: Get UUID for boot filesystem
        #   command: blkid -s UUID -o value '{{ install_drive }}{{ boot_partition_suffix }}'
        #   register: boot_uuid
        #   changed_when: false
        - name: Get UUID for root filesystem
          command: blkid -s UUID -o value /dev/mapper/root
          register: root_uuid
          changed_when: false
      tags:
        - create_filesystems
    - name: Mount filesystems
      block:
        - name: Mount root filesystem
          mount:
            path: /mnt
            src: /dev/mapper/root
            fstype: ext4
            state: mounted
        - name: Create mountpoint for boot volume
          file:
            path: /mnt/boot
            state: directory
        - name: Mount boot filesystem
          mount:
            path: /mnt/boot
            src: '{{ install_drive }}{{ boot_partition_suffix }}'
            fstype: vfat
            state: mounted
      tags:
        - mount_filesystems

    - name: Rank Arch mirrors
      block:
        - name: Install the reflector package (for rankmirrors)
          pacman:
            name:
              - reflector
            update_cache: yes
        - name: filter the fastest mirrors that support HTTPS
          shell: reflector --verbose --latest 10 --sort rate | awk -e '! /rsync/ {print}' > /etc/pacman.d/mirrorlist
      tags:
        - mirrors

    - name: Run pacstrap
      command: pacstrap /mnt base ansible btrfs-progs dhclient dhcpcd git grub linux linux-firmware netctl openssh python rsync sshpass sudo vim wpa_supplicant {{ pacstrap_extras[boottype] }}
      tags:
        - pacstrap

    - name: Generate fstab
      block:
        - name: Generate blank fstab
          command: genfstab -U /mnt >> /mnt/etc/fstab
        - name: Add root volume to fstab
          mount:
            fstab: /mnt/etc/fstab
            path: /
            src: /dev/mapper/root
            fstype: ext4
            opts: defaults
            passno: '0'
            state: present
        - name: Add boot volume to fstab
          mount:
            fstab: /mnt/etc/fstab
            path: /boot
            src: '{{ install_drive }}{{ boot_partition_suffix }}'
            fstype: vfat
            opts: defaults
            passno: '2'
            state: present
      tags:
        - fstab

    - name: Set local timezone
      command: arch-chroot /mnt ln -sf /usr/share/zoneinfo/America/Los_Angeles /etc/localtime
      tags:
        - timezone
    - name: Generate adjtime file
      command: arch-chroot /mnt hwclock --systohc
      tags:
        - adjtime
    - name: Setup locales
      block:
        - name: Configure locale.gen
          lineinfile:
            dest: /mnt/etc/locale.gen
            regexp: '{{ item.regex }}'
            line: '{{ item.line }}'
          loop:
            - {regex: en_US\.UTF-8 UTF-8, line: en_US.UTF-8 UTF-8}
            - {regex: en_US ISO-8859-1, line: en_US ISO-8859-1}
        - name: Create locale.conf
          copy:
            content: "LANG=en_US.UTF-8"
            dest: /mnt/etc/locale.conf
        - name: Generate locales
          command: arch-chroot /mnt locale-gen
      tags:
        - locales
    - name: Set hostname
      copy:
        content: '{{ inventory_hostname }}'
        dest: /mnt/etc/hostname
      tags:
        - hostname
    - name: Setup netctl
      block:
        - name: Create netctl profile for wired connection
          copy:
            content: |
              Description='Wired with DHCP'
              Interface={{ wired_interface }}
              Connection=ethernet
              IP=dhcp
              IP6=dhcp-noaddr
              # IPv6 traffic is tunneled over IPv4, which eats 20 bytes of the MTU.
              ExecUpPost='/usr/bin/ip link set {{ wired_interface }} mtu 1480'
            dest: /mnt/etc/netctl/wired
        - name: Enable wired netctl profile
          command: arch-chroot /mnt netctl enable wired
      tags:
        - netctl
    - name: Enable sshd
      command: arch-chroot /mnt systemctl enable sshd
      tags:
        - sshd
    - name: Set up initramfs
      block:
        - name: Add vconsole.conf
          ansible.builtin.template:
            src: files/vconsole.conf.j2
            dest: /mnt/etc/vconsole.conf
            owner: root
            group: root
            mode: 0644

        - name: Add mkinitcpio.conf hooks
          lineinfile:
            dest: /mnt/etc/mkinitcpio.conf
            regexp: ^HOOKS=
            line: HOOKS=(base systemd modconf block keyboard sd-vconsole autodetect sd-encrypt filesystems fsck)
          notify:
            - Update mkinitcpio
      tags:
        - initramfs
        - mkinitcpio

    - name: Setup boot
      import_tasks: tasks/boot.yml

    # - name: Setup grub boot
    #   lineinfile:
    #     path: /mnt/etc/default/grub
    #     regexp: ^#GRUB_ENABLE_CRYPTODISK=
    #     line: GRUB_ENABLE_CRYPTODISK=y
    #   notify:
    #     - Reinstall grub
    #     - Update grub configuration
    #   tags:
    #     - install_bootloader

    # - name: Setup grub boot
    #   lineinfile:
    #     path: /mnt/etc/default/grub
    #     regexp: ^GRUB_CMDLINE_LINUX_DEFAULT=
    #     line: GRUB_CMDLINE_LINUX_DEFAULT="loglevel=3 quiet rd.luks.name={{ root_luks_uuid.stdout }}=cryptdev"
    #   notify:
    #     - Reinstall grub
    #     - Update grub configuration
    #   tags:
    #     - install_bootloader

    - name: Setup user account
      block:
        - name: Create user account
          command: arch-chroot /mnt useradd --create-home --user-group --groups wheel {{ user_name }} 
        - name: Set user's password
          ansible.builtin.shell:
            cmd: echo '{{ user_name }}:password' | arch-chroot /mnt chpasswd
        - name: Expire user's password
          ansible.builtin.command:
            arch-chroot /mnt passwd -e {{ user_name }}
        - name: Create user's ssh directory
          file:
            path: /mnt/home/{{ user_name }}/.ssh
            state: directory
        - name: Set mode, owner, and group on user's ssh directory
          command: arch-chroot /mnt {{ item }}
          loop:
            - chmod 0700 /home/{{ user_name }}/.ssh
            - chown {{ user_name }}:{{ user_name }} /home/{{ user_name }}/.ssh
        - name: Copy over ssh keys from current Ansible controller as an authorized key
          copy:
            src: '{{ lookup("env", "HOME") }}/.ssh/'
            dest: '/mnt/home/{{ user_name }}/.ssh/'
        - name: Set mode, owner, and group on user's authorized_key file
          command: arch-chroot /mnt {{ item }}
          loop:
            - chmod 0600 /home/{{ user_name }}/.ssh/authorized_keys
            - chown {{ user_name }}:{{ user_name }} /home/{{ user_name }}/.ssh/authorized_keys
      tags:
        - user_account
    - name: Give passwordless sudo access to wheel group
      copy:
        content: '%wheel ALL=(ALL) NOPASSWD: ALL'
        dest: /mnt/etc/sudoers.d/wheel
        validate: /usr/sbin/visudo --check --file=%s
      tags:
        - sudo
    # - name: Reboot
    #   reboot:
    #     connect_timeout: 1
    #     reboot_timeout: 1
    #   failed_when: false
    #   tags:
    #     - reboot

  handlers:
    - name: Update mkinitcpio
      ansible.builtin.command: arch-chroot /mnt mkinitcpio -p linux
      tags:
        - initramfs
        - mkinitcpio
    - name: Update grubs
      import_tasks: tasks/grub.yml

    # - name: Reinstall grub
    #   ansible.builtin.command: arch-chroot /mnt /usr/bin/grub-install --target i386-pc --recheck "{{ install_drive }}"
    #   tags:
    #     - install_bootloader

    # - name: Update grub configuration
    #   ansible.builtin.command: arch-chroot /mnt /usr/bin/grub-mkconfig -o /boot/grub/grub.cfg
    #   tags:
    #     - install_bootloader
